(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.PrintHub = factory());
})(this, (function () { 'use strict';

    class BluetoothDevice {
        constructor(filters, timeout = 2000) {
            this.name = 'Bluetooth Low Energy';
            this.decoder = new TextDecoder('utf-8');
            this.encoder = new TextEncoder();
            this.filters = filters;
            this.timeout = timeout;
        }
        async connect() {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    reject(`Timeout: Could not find a device with the name "${this.name}"`);
                }, this.timeout);
                navigator.bluetooth
                    .requestDevice({
                    filters: this.filters,
                    optionalServices: [
                        '00001800-0000-1000-8000-00805f9b34fb',
                        '0000180a-0000-1000-8000-00805f9b34fb',
                        '49535343-fe7d-4ae5-8fa9-9fafd205e455', // BLE service
                    ],
                })
                    .then(resolve)
                    .catch(reject);
            });
        }
        async getCharacteristic(server, serviceUUID, characteristicUUID) {
            const service = await server.getPrimaryService(serviceUUID);
            const characteristic = await service.getCharacteristic(characteristicUUID);
            return characteristic;
        }
        async writeValue(characteristic, value) {
            const encoded = this.encoder.encode(value);
            await characteristic.writeValue(encoded);
        }
    }

    class ClassicBluetoothDevice {
        constructor(timeout = 2000) {
            this.name = 'Classic Bluetooth';
            this.decoder = new TextDecoder('utf-8');
            this.encoder = new TextEncoder();
            this.timeout = timeout;
        }
        async connect() {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    reject(`Timeout: Could not find a device with the name "${this.name}"`);
                }, this.timeout);
                navigator.bluetooth
                    .requestDevice({
                    acceptAllDevices: true,
                    optionalServices: ['00001101-0000-1000-8000-00805f9b34fb'], // SPP service
                })
                    .then(resolve)
                    .catch(reject);
            });
        }
        async getCharacteristic(server, serviceUUID, characteristicUUID) {
            const service = await server.getPrimaryService(serviceUUID);
            const characteristic = await service.getCharacteristic(characteristicUUID);
            return characteristic;
        }
        async writeValue(characteristic, value) {
            const encoded = this.encoder.encode(value);
            await characteristic.writeValue(encoded);
        }
    }

    const ESCPOS = {
        ESC: '\x1B',
        GS: '\x1D',
        LF: '\n',
    };

    class BLEPrinter {
        constructor(bluetooth) {
            this.bluetooth = bluetooth;
        }
        async init() {
            const device = await this.bluetooth.connect();
            return await device.gatt.connect();
        }
        async write(data) {
            await this.bluetooth.writeValue(this.characteristic, data);
        }
        async create(commands) {
            const server = await this.init();
            this.characteristic = await this.bluetooth.getCharacteristic(server, 'e7810a71-73ae-499d-8c15-faa9aef0c3f2', 'bef8d6c9-9c21-4c9e-b632-bd58c1009f9f');
            const commandString = commands.join('');
            this.write(commandString);
        }
    }

    class SPPPrinter {
        constructor(bluetooth) {
            this.bluetooth = bluetooth;
            this.position = { x: 0, y: 0 };
        }
        async init() {
            const device = await this.bluetooth.connect();
            return await device.gatt.connect();
        }
        async write(data) {
            await this.bluetooth.writeValue(this.characteristic, data);
        }
        async create(commands) {
            const server = await this.init();
            // Standard SPP service and characteristic for many printers
            this.characteristic = await this.bluetooth.getCharacteristic(server, '49535343-fe7d-4ae5-8fa9-9fafd205e455', '49535343-8841-43f4-a8d4-ecbe34729bb3');
            const commandString = commands.join('');
            await this.write(commandString);
        }
    }

    var Align;
    (function (Align) {
        Align["LEFT"] = "left";
        Align["CENTER"] = "center";
        Align["RIGHT"] = "right";
    })(Align || (Align = {}));
    var Font;
    (function (Font) {
        Font["A"] = "A";
        Font["B"] = "B";
    })(Font || (Font = {}));
    var Size;
    (function (Size) {
        Size["SINGLE"] = "single";
        Size["DOUBLE"] = "double";
    })(Size || (Size = {}));
    const paperWidth = {
        58: 32,
        80: 42,
    };

    const generateText = (config) => {
        const { text, align = Align.LEFT, font = Font.A, size = Size.SINGLE, bold = false, underline = false, } = config;
        let commands = [];
        // Reset styles
        commands.push(ESCPOS.ESC + '@');
        // Alignment
        commands.push(ESCPOS.ESC + 'a' +
            (align === Align.CENTER
                ? String.fromCharCode(1)
                : align === Align.RIGHT
                    ? String.fromCharCode(2)
                    : String.fromCharCode(0)));
        // Font and size
        const sizeMap = {
            [Font.A]: { [Size.SINGLE]: '\x00', [Size.DOUBLE]: '\x11' },
            [Font.B]: { [Size.SINGLE]: '\x01', [Size.DOUBLE]: '\x10' },
        };
        commands.push(ESCPOS.GS + '!' + sizeMap[font][size]);
        // Bold
        if (bold) {
            commands.push(ESCPOS.ESC + 'E' + String.fromCharCode(1));
        }
        // Underline
        if (underline) {
            commands.push(ESCPOS.ESC + '-' + String.fromCharCode(1));
        }
        // Add text and line feed
        commands.push(text);
        // Reset styles at the end
        if (bold) {
            commands.push(ESCPOS.ESC + 'E' + String.fromCharCode(0));
        }
        if (underline) {
            commands.push(ESCPOS.ESC + '-' + String.fromCharCode(0));
        }
        commands.push(ESCPOS.LF);
        return commands.join('');
    };
    const feed = (count) => {
        return ESCPOS.ESC + 'J' + String.fromCharCode(count);
    };
    const lineBreak = (count) => {
        return ESCPOS.ESC + 'd' + String.fromCharCode(count);
    };
    const emptyLine = () => {
        return ' \n';
    };

    class Printer {
        constructor(props) {
            this.config = props.paperSize;
            this.printer = props.printer;
            this.paperWidth = paperWidth[this.config];
        }
        async init() {
            await this.printer.create([]);
        }
        async writeText(text, options = {}) {
            const command = generateText({ ...options, text });
            await this.printer.write(command);
        }
        async writeLineBreak(options = {}) {
            const count = options.count;
            if (!count || count <= 0)
                return;
            const command = lineBreak(count);
            await this.printer.write(command);
        }
        async writeFeed(options = {}) {
            const count = options.count;
            if (!count || count <= 0)
                return;
            const command = feed(count);
            await this.printer.write(command);
        }
        async writeDashLine() {
            const dashes = '-'.repeat(this.paperWidth);
            await this.writeText(dashes);
        }
        async writeEmptyLine() {
            const command = emptyLine();
            await this.printer.write(command);
        }
        async writeTextWith2Column(text1, text2, options = {}) {
            const rightColumnWidth = text2.length;
            const leftColumnWidth = this.paperWidth - rightColumnWidth;
            if (text1.length > leftColumnWidth) {
                throw new Error('First column text is too long');
            }
            const spaceCount = leftColumnWidth - text1.length;
            const spaces = ' '.repeat(spaceCount);
            const text = `${text1}${spaces}${text2}`;
            await this.writeText(text, options);
        }
        async printQRCode(text, options = {}) {
            const { size = 'medium', align = 'center', errorCorrection = 'M' } = options;
            const sizeMap = { small: 4, medium: 6, large: 8 };
            const errorCorrectionMap = { L: 48, M: 49, Q: 50, H: 51 };
            let commands = [];
            // 1. Align
            commands.push(ESCPOS.ESC + 'a' + (align === 'center' ? '\x01' : align === 'right' ? '\x02' : '\x00'));
            // 2. Set QR code size
            commands.push(ESCPOS.GS + '(k' + String.fromCharCode(3) + '\x00\x31\x43' + String.fromCharCode(sizeMap[size]));
            // 3. Set error correction level
            commands.push(ESCPOS.GS + '(k' + String.fromCharCode(3) + '\x00\x31\x45' + String.fromCharCode(errorCorrectionMap[errorCorrection]));
            // 4. Store data in symbol storage area
            const len = text.length + 3;
            const pL = String.fromCharCode(len % 256);
            const pH = String.fromCharCode(Math.floor(len / 256));
            commands.push(ESCPOS.GS + '(k' + pL + pH + '\x31\x50\x30' + text);
            // 5. Print the QR code
            commands.push(ESCPOS.GS + '(k' + String.fromCharCode(3) + '\x00\x31\x51\x30');
            await this.printer.write(commands.join(''));
        }
        async printBarcode(text, options = {}) {
            const { format = 'CODE128', width = 2, height = 60, displayValue = true, align = 'center' } = options;
            const formatMap = {
                UPCA: 65, EAN13: 66, EAN8: 67, CODE39: 68, ITF: 69, CODABAR: 70, CODE93: 71, CODE128: 72
            };
            let commands = [];
            // 1. Align
            commands.push(ESCPOS.ESC + 'a' + (align === 'center' ? '\x01' : align === 'right' ? '\x02' : '\x00'));
            // 2. Set Barcode Height
            commands.push(ESCPOS.GS + 'h' + String.fromCharCode(height));
            // 3. Set Barcode Width
            commands.push(ESCPOS.GS + 'w' + String.fromCharCode(width));
            // 4. Set HRI (Human-Readable Interpretation) characters print position
            commands.push(ESCPOS.GS + 'H' + String.fromCharCode(displayValue ? 2 : 0)); // 0=Not printed, 1=Above, 2=Below, 3=Both
            // 5. Print Barcode
            const formatCode = String.fromCharCode(formatMap[format]);
            // For CODE128, we need to specify character set B {B and then the string.
            const data = format === 'CODE128' ? `{B${text}` : text;
            const len = String.fromCharCode(data.length);
            commands.push(ESCPOS.GS + 'k' + formatCode + len + data);
            await this.printer.write(commands.join(''));
        }
        async putImageWithUrl(url, options = {}) {
            // This is a complex operation requiring a canvas and image processing.
            // It's often better to handle this in the application logic before sending to the printer.
            console.warn('putImageWithUrl is not implemented in this version due to complexity. Please process the image to ESC/POS format in your application.');
        }
    }

    class main {
        constructor(props) {
            if (!props) {
                this.printerType = 'bluetooth';
                this.paperSize = '58';
                return;
            }
            const { paperSize, printerType } = props;
            this.printerType = printerType;
            this.paperSize = paperSize || '58';
        }
        static init(props) {
            return new main(props);
        }
        connectToPrint(callbacks) {
            const { onReady, onFailed } = callbacks;
            try {
                this.connect(this.printerType)
                    .then((printer) => {
                    onReady(printer);
                })
                    .catch((error) => {
                    onFailed(error);
                });
            }
            catch (error) {
                onFailed(error);
            }
        }
        async connect(type) {
            let bluetoothDevice;
            if (type === 'ble') {
                const filters = [{ services: ['e7810a71-73ae-499d-8c15-faa9aef0c3f2'] }];
                bluetoothDevice = new SPPPrinter(new BluetoothDevice(filters));
            }
            else if (type === 'bluetooth') {
                bluetoothDevice = new BLEPrinter(new ClassicBluetoothDevice());
            }
            else {
                throw new Error('Invalid printer type');
            }
            const printer = new Printer({
                paperSize: this.paperSize,
                printer: bluetoothDevice,
            });
            await printer.init();
            return printer;
        }
    }

    return main;

}));
